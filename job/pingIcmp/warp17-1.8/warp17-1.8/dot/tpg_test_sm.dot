#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
#
# Copyright (c) 2016, Juniper Networks, Inc. All rights reserved.
#
#
# The contents of this file are subject to the terms of the BSD 3 clause
# License (the "License"). You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at
# https://github.com/Juniper/warp17/blob/master/LICENSE.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# File name:
#     tpg_test_client_sm.dot
#
# Description:
#     Client test state machine state diagram.
#
# Author:
#     Dumitru Ceara, Eelco Chaudron
#
# Initial Created:
#     04/18/2016
#
# Notes:
#
#

digraph {
    splines=true;
    sep="+50,50";
    overlap=scalexy;
    nodesep=0.9;

    to_init[label="to_init*(S=INIT)"]
    to_open[label="to_open*(S=INIT/CLOSED)"]
    opening[label="opening(S<ESTAB)"]
    open[label="open(S=ESTAB)"]
    sending[label="sending*(S=ESTAB)"]
    no_snd_win[label="no_snd_win(S=ESTAB)"]
    closing[label="closing(S>ESTAB & S<CLOSED)"]
    to_close[label="to_close*(S=ESTAB)"]
    closed[label="closed(S=CLOSED)"]

    {rank=same sending no_snd_win}

    to_init -> to_open[label="TO(init_delay), \n A: add TO_OPEN_LST"]
    to_init -> to_open[label="init_delay==0, \n A: add TO_OPEN_LST"]

    to_open -> opening[label="TCP State CHG, \n A: rem TO_OPEN_LST"]

    opening -> open[label="TCP State ESTAB, \n A: Set(Uptime) + NotifyApp(CONN_UP)"]
    opening -> closed[label="TCP State CLOSED, \n A: Set(Downtime)"]

    open    -> sending[label="APP SEND_START, \n A: add TO_SEND_LST"]
    sending -> open[label="APP SEND_STOP, \n A: rem TO_SEND_LST"]

    open -> closing[label="TCP State CHG, \n A: Cancel(Uptime) & \n NotifyApp(CONN_DOWN)"]
    open -> to_close[label="TO(uptime), \n A: add TO_CLOSE_LST"]

    sending -> no_snd_win[label="TCP NO SND WIN, \n A: rem TO_SEND_LST"]
    sending -> closing[label="TCP State CHG, \n A: Cancel(Uptime) & \n rem TO_SEND_LST & \n NotifyApp(CONN_DOWN)"]
    sending -> to_close[label="TO(uptime), \n A: rem TO_SEND_LST & \n add TO_CLOSE_LST"]

    no_snd_win -> sending[label="TCP SND WIN, \n A: add TO_SEND_LST"]
    no_snd_win -> closing[label="TCP State CHG, \n A: Cancel(Uptime) & \n NotifyApp(CONN_DOWN)"]
    no_snd_win -> open[label="APP SEND_STOP, \n A: None"]
    no_snd_win -> to_close[label="TO(uptime), \n A:add TO_CLOSE_LST"]

    to_close -> closing[label="TCP Sate CHG, \n A: rem TO_CLOSE_LST & \n NotifyApp(CONN_DOWN)"]

    closing -> closed[label="TCP State CLOSED, \n A: Set(Downtime)"]

    closed -> to_open[label="TO(Downtime), \n A: add TO_OPEN_LST"]
}

